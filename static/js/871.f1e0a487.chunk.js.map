{"version":3,"file":"static/js/871.f1e0a487.chunk.js","mappings":"8KAEMA,EAAM,mCAEZC,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAmB,mCAAG,oGACHD,EAAAA,EAAAA,IAAA,sCAAyCD,IADtC,cACpBG,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,qDAKnBC,EAAkB,mCAAG,WAAOC,GAAP,uFAEFL,EAAAA,EAAAA,IAAA,iBACXK,EADW,oBACQN,EADR,oBAFE,cAEnBG,EAFmB,yBAKlBA,EAASC,MALS,2CAAH,sDAQlBG,EAAgB,mCAAG,WAAOC,GAAP,uFACAP,EAAAA,EAAAA,IAAA,gCACID,EADJ,iCACgCQ,EADhC,gCADA,cACjBL,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,sDAOhBK,EAAc,mCAAG,WAAOH,GAAP,uFACEL,EAAAA,EAAAA,IAAA,iBACXK,EADW,4BACgBN,EADhB,oBADF,cACfG,EADe,yBAIdA,EAASC,MAJK,2CAAH,sDAOdM,EAAiB,mCAAG,WAAOJ,GAAP,uFACDL,EAAAA,EAAAA,IAAA,iBACXK,EADW,4BACgBN,EADhB,oBADC,cAClBG,EADkB,yBAIjBA,EAASC,MAJQ,2CAAH,sDAOjBO,EAAM,CACVT,oBAAAA,EACAG,mBAAAA,EACAE,iBAAAA,EACAE,eAAAA,EACAC,kBAAAA,GAGF,K,6HC5Ce,SAASE,IACpB,IAAQC,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAMA,OAJAC,EAAAA,EAAAA,YAAU,WACNP,EAAAA,EAAAA,kBAAsBE,GAAUM,MAAK,SAAAf,GAAI,OAAIa,GAAW,OAAIb,EAAKgB,SAAxB,GAC5C,GAAE,CAACP,IAEmB,IAAnBG,EAAQK,QACD,qEAIP,8BACCL,IACG,wBACKA,EAAQM,KAAI,SAAAC,GAAM,OACf,2BACI,qCAAaA,EAAOC,WACpB,uBAAID,EAAOE,YAFNF,EAAOG,GADD,OAUlC,C","sources":["fetch/fetch.jsx","pages/Reviews/Reviews.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst KEY = \"339fdf0f312ec016e88b23cac1f5716a\";\n\naxios.defaults.baseURL = \"https://api.themoviedb.org/3\";\n\nconst fetchTrendingMovies = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${KEY}`);\n  return response.data;\n};\n\nconst fetchMoviesDetails = async (movieId) => {\n  //   console.log(typeof movieId.moviesId);\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nconst fetchSearchMovie = async (searchQuery) => {\n  const response = await axios.get(\n    `/search/movie?api_key=${KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`\n  );\n  return response.data;\n};\n\nconst fetchMovieCast = async (movieId) => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nconst fetchMovieReviews = async (movieId) => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nconst API = {\n  fetchTrendingMovies,\n  fetchMoviesDetails,\n  fetchSearchMovie,\n  fetchMovieCast,\n  fetchMovieReviews,\n};\n\nexport default API;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport API from 'fetch/fetch';\n\nexport default function Reviews(){\n    const { moviesId } = useParams();\n    const [reviews, setReviews] = useState([]);\n\n    useEffect(() => {\n        API.fetchMovieReviews(moviesId).then(data => setReviews([...data.results]))\n    }, [moviesId])\n\n    if (reviews.length === 0) {\n        return <p>We don't have any reviews for this movie</p>;\n    }\n\n    return (\n        <>\n        {reviews && (\n            <ul>\n                {reviews.map(review => (\n                    <li key={review.id} >\n                        <h3>Author: {review.author}</h3>\n                        <p>{review.content}</p>\n                    </li>\n                ))}\n            </ul>\n        )}\n        </>\n    )\n}"],"names":["KEY","axios","fetchTrendingMovies","response","data","fetchMoviesDetails","movieId","fetchSearchMovie","searchQuery","fetchMovieCast","fetchMovieReviews","API","Reviews","moviesId","useParams","useState","reviews","setReviews","useEffect","then","results","length","map","review","author","content","id"],"sourceRoot":""}